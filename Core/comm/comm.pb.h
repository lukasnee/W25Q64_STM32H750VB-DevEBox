/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.5 */

#ifndef PB_CORE_COMM_COMM_PB_H_INCLUDED
#define PB_CORE_COMM_COMM_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _COMM_CMD { 
    COMM_CMD_DOWNLINK_DATA = 0, 
    COMM_CMD_INTERCEPT = 1 
} COMM_CMD;

typedef enum _COMM_RES { 
    COMM_RES_OK = 0, 
    COMM_RES_UNKNOWN_ERROR = 1, 
    COMM_RES_ERASE_ERROR = 2, 
    COMM_RES_WRITE_ERROR = 3, 
    COMM_RES_INVALID_SIZE = 4 
} COMM_RES;

/* Struct definitions */
typedef struct _CommBasicRp { 
    uint32_t result; 
} CommBasicRp;

typedef struct _CommChunkRq { 
    uint32_t chunk_id; 
    pb_byte_t chunk_buff[128]; 
} CommChunkRq;

typedef struct _CommInterceptRq { 
    uint32_t intercept; /* 0 = off, 1 = on */
} CommInterceptRq;


/* Helper constants for enums */
#define _COMM_CMD_MIN COMM_CMD_DOWNLINK_DATA
#define _COMM_CMD_MAX COMM_CMD_INTERCEPT
#define _COMM_CMD_ARRAYSIZE ((COMM_CMD)(COMM_CMD_INTERCEPT+1))

#define _COMM_RES_MIN COMM_RES_OK
#define _COMM_RES_MAX COMM_RES_INVALID_SIZE
#define _COMM_RES_ARRAYSIZE ((COMM_RES)(COMM_RES_INVALID_SIZE+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define CommBasicRp_init_default                 {0}
#define CommInterceptRq_init_default             {0}
#define CommChunkRq_init_default                 {0, {0}}
#define CommBasicRp_init_zero                    {0}
#define CommInterceptRq_init_zero                {0}
#define CommChunkRq_init_zero                    {0, {0}}

/* Field tags (for use in manual encoding/decoding) */
#define CommBasicRp_result_tag                   1
#define CommChunkRq_chunk_id_tag                 1
#define CommChunkRq_chunk_buff_tag               2
#define CommInterceptRq_intercept_tag            1

/* Struct field encoding specification for nanopb */
#define CommBasicRp_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   result,            1)
#define CommBasicRp_CALLBACK NULL
#define CommBasicRp_DEFAULT NULL

#define CommInterceptRq_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   intercept,         1)
#define CommInterceptRq_CALLBACK NULL
#define CommInterceptRq_DEFAULT NULL

#define CommChunkRq_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UINT32,   chunk_id,          1) \
X(a, STATIC,   SINGULAR, FIXED_LENGTH_BYTES, chunk_buff,        2)
#define CommChunkRq_CALLBACK NULL
#define CommChunkRq_DEFAULT NULL

extern const pb_msgdesc_t CommBasicRp_msg;
extern const pb_msgdesc_t CommInterceptRq_msg;
extern const pb_msgdesc_t CommChunkRq_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define CommBasicRp_fields &CommBasicRp_msg
#define CommInterceptRq_fields &CommInterceptRq_msg
#define CommChunkRq_fields &CommChunkRq_msg

/* Maximum encoded size of messages (where known) */
#define CommBasicRp_size                         6
#define CommChunkRq_size                         137
#define CommInterceptRq_size                     6

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
